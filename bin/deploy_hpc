#!/bin/bash
#
# Script to configure cobbler using ansible
#
# Copyright (C) 2016-2020 Jingcheng Yang <yjcyxky@163.com>
#

show_help(){
cat << EOF
usage: $(echo $0) [-h] [-i <command>] [-k]
       -h show help document
       -i command name, it can be deploy_torque, deploy_nfs
       -k skip the check_prerequisite
EOF
}

while getopts ":hi:k" arg
do
    case "$arg" in
        "i")
            install_command="$OPTARG"
            ;;
        "k")
            skip_check="yes"
            ;;
        "?")
            echo "Unkown option: $OPTARG"
            exit 1
            ;;
        ":")
            echo "No argument value for option $OPTARG"
            ;;
        h)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown error while processing options"
            show_help
            exit 1
            ;;
    esac
done

containsElement() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

check_arg() {
    if [ -z $1 ];then
        echo "请指定参数$2"
        exit 1
    fi
}

check_env() {
    if [ -z `which ansible-playbook` ];then
        echo "请安装ansible"
        exit 1
    fi

    if [ -z `which python3` ];then
        echo "请安装python3"
        exit 1
    fi
}

check_prerequisite() {
    printf "$1(yes|no):"
    read yesorno
    case "$yesorno" in
        [yY]|[Yy][eE][sS])
            printf ""
            ;;              
        [nN]|[Nn][oO])
            printf "\n请先遵照'安装指南/README.md'完成相应准备工作\n"
            exit 1
            ;;
        *)
            echo "未知输入，请重新(yes|no)"
            check_prerequisite $1
            ;;
    esac
}

main() {

    array=("deploy_torque" "deploy_nfs")

    containsElement "$install_command" "${array[@]}"
    if [ $? == 0 ]; then
        echo "执行命令：$install_command"
        BASE_DIR=$(dirname $0)
        cd "$BASE_DIR/../cluster_deployer/playbook"
        ansible-playbook "$install_command".yml
    else
        echo "命令${install_command}不存在，请指定deploy_torque、deploy_nfs之一"
        exit 1
    fi
}

# 检测输入参数
check_arg "$install_command" "-i"
check_env
if [ -z "$skip_check" ];then
    check_prerequisite "集群所有节点是否已经安装操作系统？"
    check_prerequisite "集群业务网络是否连接正常？"
    check_prerequisite "集群所有节点是否已经安装Infiniband驱动，并测试IB网络正常？"
    check_prerequisite "所有节点是否已经安装NIS，并配置成功？"
    check_prerequisite "所有卷是否已经格式化好并挂载在存储节点相应位置？(包括/etc/fstab文件与/exports目录)"
    check_prerequisite "是否已经修改hpc_config.yml文件保持配置与集群实际情况一致？"
fi

main